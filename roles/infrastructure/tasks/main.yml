- name: Clone git repo with Docker Compose scripts
  ansible.builtin.import_tasks: git.yml

- name: Start basic Docker containers
  ansible.builtin.import_tasks: docker.yml

- name: Add cron job to start Etherpad after reboot
  ansible.builtin.cron:
    name: "start Etherpad after reboot"
    special_time: reboot
    job: "sleep 60; docker start etherpad-etherpad-1"

- name: Add cron job to start Chronograf after reboot
  ansible.builtin.cron:
    name: "start Chronograf after reboot"
    special_time: reboot
    job: "sleep 60; docker start grafana-chronograf-1"

- name: Configure logrotate for Traefik logs
  ansible.builtin.copy:
    dest: "/etc/logrotate.d/traefik"
    mode: "0644"
    content: |
      /var/log/traefik/*.log {
        compress
        size 10M
        rotate 5
        missingok
        notifempty
        postrotate
          docker kill --signal="USR1" infrastructure-reverse-proxy-1
        endscript
      }

- name: Add redirects for external domains to Traefik configuration
  ansible.builtin.blockinfile:
    path: "{{ docker.base_dir }}/infrastructure/dynamic_conf.yml"
    block: |
      ################################################################
      # Adds redirects for external domains to Traefik
      ################################################################
      #http:
      #  middlewares:
          redirect-to-nextcloud:
            redirectRegex:
              regex: "^https?://nextcloud.brinkstr.de/(.*)"
              replacement: "https://nextcloud-g2.osnabrueck-bbs-brinkstr.logoip.de/$1"
              permanent: true
        routers:
          nextcloud-redirect-router:
            rule: "Host(`nextcloud.brinkstr.de`)"
            tls:
              certResolver: letsencrypt
            entryPoints:
              - websecure
            middlewares:
              - redirect-to-nextcloud
            service: nextcloud-redirect-service@file
        services:
          nextcloud-redirect-service:
            loadBalancer:
              servers:
                - url: http://127.0.0.1:80

- name: Insert Hetzner API key as environment variable
  ansible.builtin.lineinfile:
    path: "{{ docker.base_dir }}/infrastructure/.env"
    line: "TRAEFIK_HETZNER_API_KEY={{ hetzner.api_key }}"

- name: Add env variable to Traefik Docker container
  ansible.builtin.blockinfile:
    path: "{{ docker.base_dir }}/infrastructure/docker-compose.yml"
    marker: "# {mark} ANSIBLE MANAGED HETZNER"
    insertafter: "      - traefik_dashboard_auth"
    block: |
      {% filter indent(width=4, first=true) %}
      environment:
        - HETZNER_API_KEY=$TRAEFIK_HETZNER_API_KEY
      {% endfilter %}

- name: Add certificate resolver (Hetzner) in main Traefik configuration file
  ansible.builtin.blockinfile:
    path: "{{ docker.base_dir }}/infrastructure/traefik.yml"
    marker: "# {mark} ANSIBLE MANAGED HETZNER"
    insertafter: '^certificatesResolvers:'
    block: |
      {% filter indent(width=2, first=true) %}
      hetzner:
        acme:
          email: {{ admin.email }}
          storage: /etc/traefik/acme.json
          dnsChallenge:
            provider: hetzner
      {% endfilter %}

- name: Restart Docker container for Traefik
  community.docker.docker_compose_v2:
    project_src: "{{ docker.base_dir }}/infrastructure"
    state: present
  register: infrastructure_output
