prometheus.exporter.self "alloy_check" { }

discovery.relabel "alloy_check" {
targets = prometheus.exporter.self.alloy_check.targets

rule {
    target_label = "instance"
    replacement  = constants.hostname
}

rule {
    target_label = "alloy_hostname"
    replacement  = constants.hostname
}

rule {
    target_label = "job"
    replacement  = "integrations/alloy-check"
}
}

prometheus.scrape "alloy_check" {
targets    = discovery.relabel.alloy_check.output
forward_to = [prometheus.relabel.alloy_check.receiver]  

scrape_interval = "60s"
}

prometheus.relabel "alloy_check" {
forward_to = [prometheus.remote_write.metrics_service.receiver]

rule {
    source_labels = ["__name__"]
    regex         = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
    action        = "keep"
}
}

prometheus.remote_write "metrics_service" {
endpoint {
    url = "{{ monitoring.metrics.url }}"

    basic_auth {
    username = "{{ monitoring.metrics.username }}"
    password = "{{ monitoring.metrics.password }}"
    }
}
}

loki.write "grafana_cloud_loki" {
endpoint {
    url = "{{ monitoring.logs.url }}"

    basic_auth {
    username = "{{ monitoring.logs.username }}"
    password = "{{ monitoring.logs.password }}"
    }
}
}

discovery.relabel "integrations_node_exporter" {
targets = prometheus.exporter.unix.integrations_node_exporter.targets

rule {
    target_label = "instance"
    replacement  = "{{ hostname }}"
}

rule {
    target_label = "job"
    replacement = "integrations/node_exporter"
}
}

prometheus.exporter.unix "integrations_node_exporter" {
disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]

filesystem {
    fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
    mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
    mount_timeout        = "5s"
}

netclass {
    ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
}

netdev {
    device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
}
}

// Collect metrics from node_exporter
prometheus.scrape "integrations_node_exporter" {
targets    = discovery.relabel.integrations_node_exporter.output
forward_to = [prometheus.relabel.integrations_node_exporter.receiver]
}

prometheus.relabel "integrations_node_exporter" {
    forward_to = [prometheus.remote_write.metrics_service.receiver]

    rule {
        source_labels = ["__name__"]
        regex         = "node_scrape_collector_.+"
        action        = "drop"
    }
}

// collect Traefik metrics from external endpoint
prometheus.scrape "traefik_metrics" {
    targets = [
        {"__address__" = "{{ subdomains.traefik_metrics }}.{{ basedomain }}"},
    ]
    metrics_path    = "/metrics"
    
    basic_auth {
        username = "{{ services.traefik.dashboard_user }}"
        password = "{{ services.traefik.dashboard_password }}"
    }
    forward_to = [prometheus.remote_write.metrics_service.receiver]
}

// Collect logs from node_exporter
loki.source.journal "logs_integrations_integrations_node_exporter_journal_scrape" {
max_age       = "24h0m0s"
relabel_rules = discovery.relabel.logs_integrations_integrations_node_exporter_journal_scrape.rules
forward_to    = [loki.write.grafana_cloud_loki.receiver]
}

local.file_match "logs_integrations_integrations_node_exporter_direct_scrape" {
path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/{syslog,messages,*.log}",
    instance    = "{{ hostname }}",
    job         = "integrations/node_exporter",
}]
}

discovery.relabel "logs_integrations_integrations_node_exporter_journal_scrape" {
targets = []

rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
}

rule {
    source_labels = ["__journal__boot_id"]
    target_label  = "boot_id"
}

rule {
    source_labels = ["__journal__transport"]
    target_label  = "transport"
}

rule {
    source_labels = ["__journal_priority_keyword"]
    target_label  = "level"
}
}

loki.source.file "logs_integrations_integrations_node_exporter_direct_scrape" {
targets    = local.file_match.logs_integrations_integrations_node_exporter_direct_scrape.targets
forward_to = [loki.write.grafana_cloud_loki.receiver]
}


// Collect logs from Traefik
local.file_match "traefik_logs" {
path_targets = [{
    __address__ = "localhost",
    __path__ = "/var/log/traefik/*.log",
    instance    = "{{ hostname }}",
}]
}

loki.source.file "traefik_logs" {
targets    = local.file_match.traefik_logs.targets
forward_to = [loki.write.grafana_cloud_loki.receiver]
}
